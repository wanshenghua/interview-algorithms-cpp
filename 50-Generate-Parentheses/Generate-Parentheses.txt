/* Generate Parentheses
 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()" 
*/

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        string s("");
        generatePath(res, s, 0, n, 0, 0);
        return res;
    }
    
    void generatePath(vector<string> &res, string &path, int depth, int nPar, int nLeftPar, int nRightPar){
        if(depth == 2 * nPar){
            res.push_back(path);
	    return;
        }
        
        if(nLeftPar < nPar){
            string path_copy = path;
            path.push_back('(');
            generatePath(res, path, depth + 1, nPar, nLeftPar + 1, nRightPar);
            path = path_copy;
        }
        if(nRightPar < nLeftPar){
            string path_copy = path;
            path.push_back(')');
            generatePath(res, path, depth + 1, nPar, nLeftPar, nRightPar + 1);
            path = path_copy;
        }
    }
};